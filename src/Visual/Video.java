/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Visual;

import JavaServe.ClientCommunication;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.event.ListSelectionEvent;

/**
 * Clase Video que extiende JFrame y maneja la interfaz gráfica para la
 * reproducción de videos. Se conecta a un servidor y permite la selección y
 * reproducción de videos.
 *
 * @autor Personal
 */
public class Video extends javax.swing.JFrame {

    private static final String SERVER_ADDRESS = "192.168.1.35"; // Cambia esto con la dirección IP de tu servidor
    private static final int SERVER_PORT = 5050;
    private final Boolean authen;
    private final Boolean Rol;
    private String user;

    /**
     * Constructor de la clase Video.
     *
     * @param userName El nombre de usuario.
     * @param auth Indica si el usuario está autenticado.
     * @param admin Indica si el usuario tiene rol de administrador.
     * @throws IOException Si hay un problema al conectar con el servidor.
     */
    public Video(String userName, Boolean auth,
            Boolean admin) throws IOException {
        this.authen = auth;
        this.Rol = admin;
        this.user = userName;
        initComponents();
        connectToServer();

        VideoList.getSelectionModel()
                .addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                // Obtiene la canción seleccionada
                String selectedVideo = VideoList.getSelectedValue();
                if (selectedVideo != null) {
                    try {
                        // Muestra la interfaz para reproducir la canción
                        downloadFileFromServer(selectedVideo, "VIDEO");
                        showVideoPlayer(selectedVideo);
                    } catch (IOException ex) {
                        Logger.getLogger(Client.class.getName())
                                .log(Level.SEVERE, null, ex);
                    }

                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jToggleButton1 = new javax.swing.JToggleButton();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        VideoList = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();

        jToolBar1.setRollover(true);

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jDesktopPane1.setBackground(new java.awt.Color(204, 153, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 153));
        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel1.setText("Videos disponibles");

        VideoList.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(VideoList);

        jButton1.setText("Volver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jDesktopPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jLabel1))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1))
                    .addGroup(jDesktopPane1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jDesktopPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Client vuelve = new Client(user, authen, Rol);
        vuelve.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * Descarga un archivo desde el servidor.
     *
     * @param file El nombre del archivo a descargar.
     * @param tipo El tipo de archivo (por ejemplo, "VIDEO").
     * @throws IOException Si ocurre un error durante la descarga del archivo.
     */
    private void downloadFileFromServer(String file,
            String tipo) throws IOException {
        int TIMEOUT = 500;

        // Verificar si el usuario está autenticado
        if (Login.sharedAuth) {
            // Crear una nueva instancia de ClientCommunication y un nuevo socket
            try (Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT); 
                 PrintWriter out = new PrintWriter(socket.getOutputStream(), 
                 true); BufferedReader in = new BufferedReader(
                 new InputStreamReader(socket.getInputStream())); 
                 OutputStream binaryOut = socket.getOutputStream(); 
                 InputStream binaryIn = socket.getInputStream()) {

                ClientCommunication clientCommunication = 
                new ClientCommunication(socket, out, in, binaryOut, binaryIn);
                clientCommunication.sendMessage("DOWNLOAD_" 
                + tipo + "_" + file + "-" 
                + Login.shareRol + "-" + Login.sharedAuth);
                clientCommunication.receiveFileFromServer("download/" + file);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            // Usuario no autenticado, no se puede descargar el archivo
            System.err.println("El usuario no está autenticado.");
        }

        // Agregar un tiempo de espera entre cada solicitud
        try {
            TimeUnit.MILLISECONDS.sleep(TIMEOUT);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    /**
     * Conecta al servidor y obtiene la lista de videos.
     *
     * @throws IOException Si ocurre un error durante la conexión al servidor.
     */
    private void connectToServer() throws IOException {
        try (Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT); 
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true); 
             BufferedReader in = new BufferedReader(new InputStreamReader
            (socket.getInputStream())); OutputStream binaryOut = socket
            .getOutputStream(); InputStream binaryIn = 
                    socket.getInputStream()) {
            ClientCommunication clientCommunication = 
            new ClientCommunication(socket, out, in, binaryOut, binaryIn);
            // Enviar solicitud al servidor para obtener la lista de videos
            clientCommunication.sendMessage("GET_VIDEOS-" + Login.shareRol 
                    + "-" + Login.sharedAuth);

            // Recibir respuesta del servidor
            String serverResponseVideos = clientCommunication.receiveMessage();
            System.out.println("Videos from server: " + serverResponseVideos);
            // Procesar la respuesta del servidor y actualizar la lista de videos
            ListModel<String> videoListModel =
                    processServerResponse(serverResponseVideos);
            updateVideoList(videoListModel);

            clientCommunication.close();
        } catch (IOException e) {
        }
    }

    /**
     * Muestra la interfaz para reproducir el video seleccionado.
     *
     * @param selectedVideo El nombre del video seleccionado.
     */
    private void showVideoPlayer(String selectedVideo) {
        // Mostrar la interfaz para reproducir el video seleccionado
        VideoM playerFrame = new VideoM(selectedVideo);
        playerFrame.setVisible(true);
    }

    /**
     * Procesa la respuesta del servidor y crea un modelo de lista.
     *
     * @param response La respuesta del servidor.
     * @return Un modelo de lista que contiene los nombres de los videos.
     */
    private ListModel<String> processServerResponse(String response) {
        // Procesar la respuesta del servidor y crear un modelo de lista
        DefaultListModel<String> songListModel = new DefaultListModel<>();
        String[] songsArray = response.split(";"); // Suponiendo que ';' es el delimitador

        for (String song : songsArray) {
            if (song.equals("END_OF_LIST")) {
                break; // Detener el ciclo si encuentra la cadena "END_OF_LIST"
            }
            songListModel.addElement(song);
        }

        return songListModel;
    }

    public void updateVideoList(ListModel<String> videos) {
        // Actualizar la lista de videos en la interfaz de usuario
        VideoList.setModel(videos);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> VideoList;
    private javax.swing.JButton jButton1;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
